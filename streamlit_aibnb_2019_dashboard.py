import numpy as np
import pandas as pd
import seaborn as sns
from matplotlib import pyplot as plt
import geopandas
import folium
from folium.plugins import MarkerCluster
from PIL import Image
import plotly.express as px
import streamlit as st
from streamlit_folium import folium_static
import plotly.graph_objects as go

# set wide page
st.set_page_config(layout='wide')


@st.cache(allow_output_mutation=True)
def get_df(path):
    df = pd.read_csv(path)
    return df


def get_geofile(geofile_path):
    geofile = geopandas.read_file(geofile_path)
    return geofile


def transform_df(df):
    # Criando nomes para im√≥veis sem nomes
    df['name'] = df.apply(lambda x: x['neighbourhood'] + str(x['id']) if pd.isna(x['name']) == True else x['name'],
                          axis=1)

    # Criando nomes para hosts sem nomes
    df['host_name'] = df.apply(
        lambda x: x['neighbourhood'] + str(x['host_id']) if pd.isna(x['host_name']) == True else x['host_name'], axis=1)

    # Criando nova base de Dados retirando os im√≥veis considerados inativos (Sem n√∫mero de Reviews e disponibilidade 0)
    df_ativos = df[(df['number_of_reviews'] >= 1) & (df['availability_365'] != 0)].copy()

    # Criando Feature rentability (Calculando a rentabilidade de cada im√≥vel)
    df_ativos['rentability'] = df_ativos.apply(
        lambda x: (x['price'] * (x['minimum_nights'] + 1) * x['number_of_reviews']) / np.sqrt(x['availability_365']),
        axis=1)

    # Convertendo last_review para formato de data
    df_ativos['last_review'] = pd.to_datetime(df_ativos['last_review'])

    # Retirando dos dados ativos com rentabilidade que foi considerada muito discrepante atrav√©s da EDA
    df_analise = df_ativos[df_ativos['rentability'] <= 29794.06].copy()

    return df_analise


def create_px_bargraph(df, x, y, color, title, text, unit1, unit2):
    df_graph = df[[x, y]].groupby(by=x).mean().sort_values(by=y).reset_index()
    fig = px.bar(df_graph, x=x, y=y, color=color,
                 title=title, text=text,
                 color_discrete_sequence=('PeachPuff', 'cadetblue', 'darkseagreen', 'LightSkyBlue', 'lightcoral'))
    fig.update_traces(textfont_size=12, textangle=0, textposition="outside", cliponaxis=False)
    fig.update_traces(texttemplate=unit1 + '%{text:.3s}' + unit2, textposition='outside')
    st.plotly_chart(fig)
    return None


def point_map(df):
    houses = df[
        ['id', 'latitude', 'longitude', 'price', 'rentability', 'number_of_reviews', 'availability_365', 'room_type']]
    fig = px.scatter_mapbox(data_frame=houses, lat='latitude', lon='longitude', color='room_type', text=None,
                            hover_name=None,
                            hover_data={'room_type': True, 'rentability': True, 'latitude': False, 'longitude': False,
                                        'number_of_reviews': True, },
                            custom_data=None, size='number_of_reviews', animation_frame=None, animation_group=None,
                            category_orders=None,
                            labels={'room_type': 'Tipo de im√≥vel', 'number_of_reviews': 'N¬∞ de Reviews',
                                    'rentability': 'Rentabilidade'}, color_discrete_sequence=None,
                            color_discrete_map=None, color_continuous_scale=None,
                            range_color=None, color_continuous_midpoint=None, opacity=None, size_max=15, zoom=10,
                            center=None,
                            mapbox_style='open-street-map', title='AB_NYC_2019', template=None, width=None, height=600)
    fig.update_layout(margin={'r': 0, 't': 0, 'l': 0, 'b': 0})
    fig.show()
    return None


def create_px_catplot(df, x, y, col, kind, xlabel):
    sns.set(rc={'axes.facecolor': 'black',
                'figure.facecolor': 'black',
                'text.color': 'white',
                'xtick.color': 'white',
                'ytick.color': 'white',
                'axes.labelcolor': 'white'
                })
    ax1 = sns.catplot(
        data=df, x=x, y=y, col=col, ci=None,
        kind=kind)
    ax1.set_axis_labels("", xlabel)
    ax1.set_titles(col_template="{col_name}")
    for ax in ax1.axes.ravel():
        for c in ax.containers:
            ax.bar_label(c, fmt='%1.1f')
        ax.margins(y=0.2)
    st.pyplot(fig=ax1)
    return None


# Cria√ß√£o de Gr√°fico de Barras por M√©dia
def create_sns_bargraph_mean(df, x, y, title):
    df_graph = df[[x, y]].groupby(by=x).mean().sort_values(by=y, ascending=False).head(10).reset_index()
    fig1 = plt.figure(figsize=[15, 3])
    ax1 = sns.barplot(data=df_graph, x=x, y=y)
    plt.xlabel(x)
    plt.ylabel(y)
    plt.title(title)
    for i in ax1.containers:
        ax1.bar_label(i, )
    st.pyplot(fig=ax1.figure)
    return None


# Cria√ß√£o de Gr√°fico de Barras por Soma
def create_sns_bargraph_sum(df, x, y, title):
    df_graph = df[[x, y]].groupby(by=x).sum().sort_values(by=y, ascending=False).head(10).reset_index()
    fig1 = plt.figure(figsize=[15, 3])
    ax1 = sns.barplot(data=df_graph, x=x, y=y)
    plt.xlabel(x)
    plt.ylabel(y)
    plt.title(title)
    for i in ax1.containers:
        ax1.bar_label(i, )
    st.pyplot(fig=ax1.figure)
    return None


def pages(df_analise, geodata):
    page = st.sidebar.selectbox("Selecione a P√°gina:",
                                ("Problema de Neg√≥cio", "Visualiza√ß√£o dos Dados", "Hip√≥teses de Neg√≥cio", "Conclus√£o"))
    # Problema de Neg√≥cio
    if page == "Problema de Neg√≥cio":
        st.title('Projeto de Insight')
        st.markdown('''O Objetivo deste projeto √© gerar insights com base na an√°lise explorat√≥ria dos dados da Airbnb 
            NY de 2019.''')
        st.markdown('---')
        st.title('Sobre o Problema de Neg√≥cio')
        st.markdown('''O investidor James Bauer gostaria de diversificar seus neg√≥cios e come√ßar a investir em 
            im√≥veis. Ele definiu que compraria im√≥veis na cidade de Nova York, nos Estados Unidos. Por ser um dos locais 
            mais caros para se viver no Pa√≠s, ele acredita que obter√° um retorno satisfat√≥rio de seus investimentos caso 
            loque im√≥veis na cidade.''')

        st.markdown('''Como planeja-se inicialmente locar os im√≥veis adquiridos, ele definiu que ir√° utilizar a 
            plataforma Airbnb para esse fim. Para realizar o estudo foi fornecida a base de dados referente aos im√≥veis 
            da Airbnb em Nova York em 2019. O estudo tem como objetivo a escolha das regi√µes onde h√° maior loca√ß√£o, 
            maiores pre√ßos, maior rentabilidade, e que fiquem em regi√µes favor√°veis da cidade de Nova York, 
            pois ele acredita que essas caracter√≠sticas ir√£o ajud√°-lo a recuperar o dinheiro investido na aquisi√ß√£o 
            desses im√≥veis mais rapidamente.''')
        st.markdown('---')
        st.title('Qual o valor em R$ gerado por este projeto?')
        st.markdown('Infelizmente devido a base de dados n√£o possuir os valores dos im√≥veis,n√£o √© possivel estimar com precis√£o o retorno gerado.')
        st.markdown('Entretando o tempo de retorno do investimento poderia ser calculado com a f√≥rmula abaixo:')
        st.markdown(
            r'''
            $$ Rùëíùë°ùë¢ùëüùëõ Iùëõùë£ùëíùë†ùë°ùëöùëíùëõùë° = \frac{ùëñùëõùë£ùëíùë†ùë°ùëöùëíùëõùë°}{ùëùùëüùëñùëêùëí * (ùëöùëñùëõùëñùëöùë¢ùëö\_ùëõùëñùëî‚Ñéùë°ùë† + 1)}  $$)
            ''')

    # Visualiza√ß√£o dos Dados
    if page == "Visualiza√ß√£o dos Dados":
        st.title('Visualiza√ß√£o dos Dados')
        st.markdown('Clicando no cabe√ßalho de cada coluna, √© poss√≠vel ordenar os dados de forma ascendente ou '
                    'decrescente')
        st.write(df_analise)
        st.markdown('A feature **Rentability** foi obtida atrav√©s dos dados com a seguinte f√≥rmula: ')
        st.markdown(
            r'''
            $$ ùëüùëíùëõùë°ùëéùëèùëñùëôùëñty = \frac{ùëùùëüùëñùëêùëí * (ùëöùëñùëõùëñùëöùë¢ùëö\_ùëõùëñùëî‚Ñéùë°ùë† + 1) *  nùë¢ùëöùëèùëíùëü\_ùëúùëì\_ùëüùëíùë£ùëñùëíùë§ùë†}{ \sqrt{ùëéùë£ùëéùëñùëôùëéùëèùëñùëôùëñùë°ùë¶_365}} $$)
            ''')
        st.markdown('---')
        st.subheader('Mapas')
        st.markdown('Selecione o Mapa que deseja visualizar na barra ao lado')

        c1, c2 = st.columns(2)
        st.sidebar.markdown('Selecione os mapas desejados:')
        # Mapa 1
        is_check = st.sidebar.checkbox('Mapa - Im√≥veis por tipo')
        if is_check:
            with c1:
                st.header('Mapa - Im√≥veis por tipo')
            df_map = df_analise[
                ['id', 'latitude', 'longitude', 'price', 'rentability', 'number_of_reviews', 'availability_365',
                 'room_type']]
            fig = px.scatter_mapbox(data_frame=df_map, lat='latitude', lon='longitude', color='room_type', text=None,
                                    hover_name=None,
                                    hover_data={'room_type': True, 'rentability': True, 'latitude': False,
                                                'longitude': False, 'number_of_reviews': True, },
                                    custom_data=None, size='number_of_reviews', animation_frame=None,
                                    animation_group=None,
                                    category_orders=None,
                                    labels={'room_type': 'Tipo de im√≥vel', 'number_of_reviews': 'N¬∞ de Reviews',
                                            'rentability': 'Rentabilidade'}, color_discrete_sequence=None,
                                    color_discrete_map=None, color_continuous_scale=None,
                                    range_color=None, color_continuous_midpoint=None, opacity=None, size_max=15,
                                    zoom=10,
                                    center=None,
                                    mapbox_style='open-street-map', title='AB_NYC_2019', template=None, width=None,
                                    height=510)
            fig.update_layout(margin={'r': 0, 't': 0, 'l': 0, 'b': 0})
            c1.plotly_chart(fig)

        is_check2 = st.sidebar.checkbox('Mapa de Calor - Rentabilidade M√©dia')
        if is_check2:
            with c2:
                st.header('Mapa de Calor - Rentabilidade M√©dia')
            df_map = df_analise[['neighbourhood_group', 'rentability']].groupby(
                by='neighbourhood_group').mean().sort_values(
                by='rentability').reset_index()
            f = folium.Figure(width=900, height=500)
            m = folium.Map(location=[df_analise['latitude'].mean(), df_analise['longitude'].mean()],
                           default_zoom_start=15).add_to(f)
            folium.Choropleth(
                geo_data=geodata,
                name='choropleth',
                data=df_map,
                columns=['neighbourhood_group', 'rentability'],
                key_on='feature.properties.name',
                fill_color='YlOrRd',
                fill_opacity=0.7,
                line_opacity=0.2,
                legend_name='AVG RENTABILITY').add_to(m)
            with c2:
                folium_static(m)
        # Filters
        f_neighbourhood = st.sidebar.multiselect('Selecione os Bairros Desejados',
                                                 sorted(set(df_analise['neighbourhood'].unique())))
        f_price = st.sidebar.slider('Selecione a faixa de Pre√ßo desejada', min_value=int(df_analise['price'].min()),
                                    max_value=int(df_analise['price'].max()), value=int(df_analise['price'].max()))
        f_roomtype = st.sidebar.multiselect('Selecione o tipo de  im√≥vel',
                                            sorted(set(df_analise['room_type'].unique())))
        if not f_neighbourhood:
            f_neighbourhood = df_analise['neighbourhood'].unique()

        if not f_roomtype:
            f_roomtype = df_analise['room_type'].unique()

        st.markdown('---')
        st.subheader('An√°lises Gr√°ficas')

        c1, c2 = st.columns(2)

        with c1:
            create_px_bargraph(df_analise[df_analise['price'] <= f_price &
                                          df_analise['neighbourhood'].isin(f_neighbourhood) &
                                          df_analise['room_type'].isin(f_roomtype)], "neighbourhood_group",
                               "availability_365", 'neighbourhood_group',
                               'M√©dia de Disponibilidade x Regi√µes', 'availability_365', '', " Days")
        with c2:
            create_px_bargraph(df_analise[df_analise['neighbourhood'].isin(f_neighbourhood) &
                                          df_analise['price'] <= f_price &
                                          df_analise['room_type'].isin(f_roomtype)], "neighbourhood_group", "price",
                               'neighbourhood_group',
                               'M√©dia de Pre√ßo x Regi√µes', 'price', '$ ', "")

        create_sns_bargraph_mean(df_analise[df_analise['neighbourhood'].isin(f_neighbourhood) &
                                            df_analise['price'] <= f_price &
                                            df_analise['room_type'].isin(f_roomtype)],
                                 'neighbourhood',
                                 'rentability', "Neighbourhood vs Rentability Mean")
        create_sns_bargraph_sum(df_analise[df_analise['neighbourhood'].isin(f_neighbourhood) &
                                           df_analise['price'] <= f_price &
                                           df_analise['room_type'].isin(f_roomtype)], 'neighbourhood',
                                'number_of_reviews', "Neighbourhood vs Number os Reviews Sum")

        create_px_catplot(data, "neighbourhood_group", "price", "room_type", "bar", "Rentability")
        create_px_catplot(data, "neighbourhood_group", "price", "room_type", "bar", "Price ($)")
        create_px_catplot(data, "neighbourhood_group", "number_of_reviews", "room_type", "bar",
                          "Number of Reviews")
        create_px_catplot(data, "neighbourhood_group", "availability_365", "room_type", "bar", "Availability 365")

    if page == "Hip√≥teses de Neg√≥cio":
        st.title('Hip√≥tese 1')
        st.markdown('Em m√©dia, os alugu√©is mais caros da cidade de Nova York est√£o nas regi√µes ao entorno do Central '
                    'Park.')
        st.markdown('As regi√µes ao entorno do Central Park s√£o:')
        st.text('- East Harlem')
        st.text('- Harlem')
        st.text('- Upper East Side')
        st.text('- Upper West Side')
        g1 = df_analise[['neighbourhood', 'price']].groupby(by='neighbourhood'). \
            mean().sort_values(by='price', ascending=False).head(10).reset_index()
        fig = plt.figure(figsize=[15, 2])
        sns.barplot(x='neighbourhood', y='price', data=g1)
        st.pyplot(fig)
        st.subheader('Hip√≥tese Falsa: Como podemos ver a no gr√°fico acima, na m√©dia, os alugueis mais caros s√£o em '
                     'Sea Gate.')

        st.markdown('---')
        st.title('Hip√≥tese 2')
        st.markdown('Staten Island tem em m√©dia os alugu√©is mais baratos')
        g2 = df_analise[['neighbourhood_group', 'price']].groupby(by='neighbourhood_group').mean().sort_values(
            by='price', ascending=False).reset_index()
        fig = plt.figure(figsize=[15, 2])
        sns.barplot(x='neighbourhood_group', y='price', data=g2)
        st.pyplot(fig)
        st.subheader('Hip√≥tese Falsa: Como podemos ver a hipotese √© falsa, na m√©dia os alugueis mais baratos s√£o no '
                     'Bronx. Sendo a m√©dia do aluguel de Staten Islande 10% maior que no Bronx.')

        st.markdown('---')
        st.title('Hip√≥tese 3')
        st.markdown('Quanto mais reviews, menos tempo o im√≥vel ficou disp√≥nivel')
        st.write(df_analise[['number_of_reviews', 'availability_365']].corr())
        st.subheader('Hip√≥tese Falsa: Ambos os valores apresentam uma baixa correla√ß√£o, n√£o tendo uma rela√ß√£o '
                     'especifica')

        st.markdown('---')
        st.title('Hip√≥tese 4')
        st.markdown('Hosts com mais de um lugar cobram mais caro os alug√∫eis do que aqueles que tem apenas um lugar')
        st.write(df_analise[['calculated_host_listings_count', 'price']].corr())
        st.subheader('Hip√≥tese Falsa: Ambos os valores apresentam uma baixa correla√ß√£o. Na m√©dia, o n√∫mero de '
                     'im√≥veis que o Host tem, n√£o impacta no pre√ßo do aluguel')

        st.markdown('---')
        st.title('Hip√≥tese 5')
        st.markdown('A categoria Entire home/apt √© a mais cara que qualquer outra categoria, independente da regi√£o')
        g5 = df_analise[['room_type', 'price']].groupby(by='room_type').mean().sort_values(by='price',
                                                                                           ascending=False).reset_index()
        fig = plt.figure(figsize=[15, 2])
        sns.barplot(x='room_type', y='price', data=g5)
        st.pyplot(fig)
        st.subheader('Hip√≥tese Verdadeira: Dos 3 tipos de im√≥veis, Entire home/apt √© o mais caro. Sendo '
                     'aproximadamente 238% mais caro que o segundo colocado, Private Room.')

    if page == "Conclus√£o":
        st.title(
            "Quais s√£o os melhores bairros e tipos de im√≥veis a serem comprados para termos a maior rentabilidade?")
        st.subheader("Com base na an√°lise dos dados mostrados na p√°gina de visualiza√ß√£o de dados e nas hip√≥teses "
                     "levantadas, vamos elencar as melhores caracteristicas:")
        st.markdown("- Regi√£o com maior rentabilidade m√©dia: **Manhattan**")
        st.markdown("- Regi√£o com a menor disponibilidade m√©dia: **Brooklyn**")
        st.markdown("- Regi√£o com os maiores valores de alugu√©is em m√©dia: **Manhattan**")
        st.markdown("- Tipo de quarto com maior rentabilidade m√©dia: **Entire home/apt**")
        st.markdown("- Bairro com maior quantidade de reviews:**Bedford-stuyvesant - Brooklyn**")
        st.markdown("- Bairro com maior rentabilidade m√©dia: **DUMBO - Brooklyn**")

        st.markdown("Com base nessas caracteristicas iremos recomendar a compra de im√≥veis em dois bairros, "
                    "sendo esses **Manhattan** e **Brooklyn**, para aumentar a diversifica√ß√£o e optando "
                    "preferencialmente pelos tipos de quarto **Entire home/apt**. Abaixo os melhores bairros em cada "
                    "um dos dois Burgos para se adquirir im√≥veis")

        st.markdown('---')
        st.subheader("Manhattan")
        a1 = df_analise[['neighbourhood', 'rentability']][(df_analise['neighbourhood_group'] == 'Manhattan') & (
                df_analise['room_type'] == 'Entire home/apt')].reset_index(drop=True)
        create_sns_bargraph_mean(a1, 'neighbourhood', 'rentability', 'Manhattan - Neighbourhood x Rentability')
        st.subheader("Recomendamos a compra de Entire Home/Apt em Manhattan nos bairros Civic Center e Nolita. Com a "
                     "adi√ß√£o do Harlem, que figura no top 3 bairros com maior n√∫mero de reviews e no Top 9 dos com "
                     "melhor rentabilidade m√©dia.")

        st.markdown('---')
        st.subheader("Brooklyn")
        a2 = df_analise[['neighbourhood', 'rentability']][(df_analise['neighbourhood_group'] == 'Brooklyn') & (
                df_analise['room_type'] == 'Entire home/apt')].reset_index(drop=True)
        create_sns_bargraph_mean(a2, 'neighbourhood', 'rentability', 'Brooklyn - Neighbourhood x Rentability')
        st.subheader("Recomendamos a compra de Entire Home/Apt em Brooklyn nos bairros DUMBO e Park Slope. Com a "
                     "adi√ß√£o de Williamsburg, que figura no top 2 bairros com maior n√∫mero de reviews e no Top 8 dos "
                     "com melhor rentabilidade m√©dia.")


if __name__ == '__main__':
    path = 'AB_NYC_2019.csv'
    data = get_df(path)
    geo = get_geofile('new-york-city-boroughs.geojson')
    data_analise = transform_df(data)
    pages(data_analise, geo)
